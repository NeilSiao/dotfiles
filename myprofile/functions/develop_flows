#!/usr/bin/env sh
COLOR_RED="\033[1;31m"
COLOR_GREEN="\033[1;32m"

# dont have this neil.
#source ~/work/release/setting.sh

function open_github()
{
    open http://github.com/$(git config --get remote.origin.url | awk -F '[:.]' '{print $3}');
}

function new_feature()
{
    branchName="feature/$1";
    gco develop
    git pull
    git push origin develop:$branchName
    gco $branchName
}
function rm_feature()
{
    branchName="feature/$1";
    echo "git push origin :$branchName";
    git push origin :$branchName;
    echo "git branch -d $branchName";
    git branch -d $branchName;
}

function new_release()
{
    branchName="release/$1"
    gco develop
    git pull
    git push origin develop:$branchName
    gco $branchName
}
function merge_release()
{
    branchName=$(git rev-parse --abbrev-ref HEAD | awk -F "/" '{print $1}')
    if [[ "release" != $branchName ]] ; then
        echo "$COLOR_RED 請切到 release branch !!"
    fi
    for feature in $releaseBranches; do
        git merge $feature --no-ff
    done
    echo "$COLOR_GREEN release branches merge 完成 !!"
}

function new_hotfix()
{
    #hotfix/vipop-XXXX
    branchName="hotfix/$1"
    git push origin master:$branchName
    echo "修復完成後，發PR至 rc/automatic 進行Lab驗收"
    #Lab驗收完成後，於 hotfix/vipop-XXXX 分支發PR至 release/automatic 進行Staging驗收
    # Staging驗收完成後，於 hotfix/vipop-XXXX 分支發PR至 master 準備上線，Reviewer標記 104QA 與 一名工程 ，並且Assignee標記 主管
    # 待 主管 Merge上線後，於 hotfix/vipop-XXXX 分支發PR至 develop 進行合併。
}

function rebase_feature()
{
    branchName="feature/$1"
    git pull --rebase origin $branchName
}

function new_pr()
{
    jira="$1"
    title="$jira $2"
    baseBranch="$3"
    body="## 檢查項目

- 需求單\[$jira\] (Code Owner 填寫)
- Pull Request (Code Owner 檢查)
  - [x] 確實填寫需求單、上線單號
  - [ ] 確認添加對應的環境標籤（staging, production）
  - [x] 通過一名以上團隊內的工程師或上一級主管審核
  - [ ] 確認 版號 或 PR 連結更新到 上線程式清單
  - [ ] 跨瀏覽器（IE11）檢查、測試
- Code Review (Reviewer 檢查)
  - [ ] PR、Commit 遵循 [版本控制規範 > Commit Title 格式規範](https://github.com/104corp/guideline/tree/master/vcs)
  - [ ] 程式碼的行為是否符合開發者（需求）的預期
  - [ ] 程式碼對於呼叫外部服務所做的例外處理是否完整
  - [ ] 程式碼是否可以簡化
  - [ ] 程式碼是否清晰的命名變數
  - [ ] 程式碼在非緊急狀況、時程壓力下，是否有自動化測試
  - [ ] 相關文件是否同時更新"
    gh pr create -B "$baseBranch" -t "$title" -b "$body"
}